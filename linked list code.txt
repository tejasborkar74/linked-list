#include<stdio.h>
#include<stdlib.h>

struct node{
int data;
struct node* next;
};

// calculates the size of linked list
int length(struct node* head)
{
    int len=0;
    while(head!=NULL)
    {
        head=head->next;
        len+=1;
    }
    return len;
}

//////////////////////////////////////////////////////////////////////////////////////////
// Inserts data at head of Linked List
struct node* insertathead(struct node* head,int data){

struct node* nn;
nn =(struct node*) malloc(sizeof(struct node));
nn->data = data;
nn->next = head;

return nn;
}
// Inserts data at tail of Linked List
struct node* insertattail(struct node* head,int data)
{
    if(head==NULL)
    {
        struct node* nn;
        nn =(struct node*) malloc(sizeof(struct node));
        nn->data=data;
        nn->next=NULL;
        return nn;
    }
    else
    {
        struct node* tail=head;
        while(tail->next!=NULL)
        {
            tail=tail->next;
        }
        struct node* nn;
        nn=(struct node*) malloc(sizeof(struct node));
        nn->data=data;
        tail->next=nn;
        nn->next =NULL;
        return head;
    }
}

// Inserts data at middle of Linked List
struct node* insertatmid(struct node* head,int p,int data)
{
    if(head==NULL||p==0)
        insertathead(head,data);
    else if(p>=length(head))
        insertattail(head,data);
    else
    {
        int jump=1;
        struct node* temp=head;
        while(jump<=p-1)
        {
            temp=temp->next;
            jump++;
        }
        struct node* nn=(struct node*) malloc(sizeof(struct node));
        nn->data=data;
        nn->next= temp->next;
        temp->next=nn;
        return head;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////
// Checks If linked list is empty
int isempty(struct node *p)
{
    if(p==NULL)
        return 1;
    else
        return 0;
}

// Deletes data at head of Linked List
struct node* deleteathead(struct node* head){

    if(isempty(head)){
        return head;
    }
else{
struct node* nn = head;
head = head->next;

printf("Removed node is %d\n",nn->data);
delete nn;
return head;
}
}


// Deletes data at tail of Linked List
struct node* deleteattail(struct node* head){    //at tail

    if(isempty(head)){
        return head;
    }

else{
struct node* temp = head;
struct node* pre=NULL;
while(temp->next!=NULL)
{
    pre=temp;
    temp=temp->next;
}

printf("Removed node is %d\n",temp->data);
free(temp);
pre->next=NULL;
return head;
}
}

// Deletes data at middle of Linked List
struct node* deleteatmid(struct node *head,int n)
{
    if(head==NULL||n>length(head))
        return head;
    else if(n==0)
        deleteathead(head);
    else if(n==length(head)-1)
        deleteattail(head);
    else{
        int jump=1;
        node *pre=head;
        while(jump<=n-1)
        {
            pre=pre->next;
            jump++;
        }
        struct node *temp=pre->next;
        pre->next=temp->next;
        free(temp);
        return head;
    }

}
////////////////////////////////////////////////////////////////////////
// Displays Linked List
void display(struct node*head){
printf("\n");
while(head!=NULL){
    printf("%d\t",head->data);
    head=head->next;
}



}
////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//SEARCH AND DELETE/////
struct node* searchdelete(struct node* head,int d)
{
 struct node *p=head,*q=NULL;
 while(p!=NULL&&p->data!=d)
 {
     q->next=p;
     p=p->next;
 }
 if(p==NULL)
 {
     printf("element not found");
 }
 else if(q==NULL)
 {
     head=p->next;
     free(p);
 }
 else{
    q->next=p->next;
    free(p);
 }
 return head;

}


